{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_3",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_4",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "id": "port_4_to_port_5",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_5_to_port_6",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_6_to_port_1",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "679832a3bf5c2a59d0b89f687dc01b097deebd9e",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 20,
                    "y": 0
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 20,
                    "y": 772
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "Get playbook owner",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "get_playbook_owner",
                        "id": "3",
                        "inputParameters": [],
                        "outputVariables": [
                            "user_id",
                            "username"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "code",
                    "userCode": "\n    pb_info = phantom.get_playbook_info()\n    phantom.debug(f\"Found playbook info: {str(pb_info)}\")\n    \n    user_id = int(pb_info[0]['effective_user_id'])\n    phantom.debug(f\"Found user ID: {user_id}\")\n    \n    # Build owner details URL\n    url = phantom.build_phantom_rest_url('ph_user', user_id)\n    phantom.debug(f\"Making HTTP GET request to: {url}\")\n    response = phantom.requests.get(url, verify=False)\n    phantom.debug(f\"Response from Phantom: {response}\")\n    owner_info = response.json()\n    \n    username = owner_info['username']\n    phantom.debug(f\"Found username: {username}\")\n    \n    get_playbook_owner__user_id = user_id\n    get_playbook_owner__username = username\n\n",
                    "x": 0,
                    "y": 148
                },
                "4": {
                    "customCode": "@phantom.playbook_block()\ndef prompt_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"prompt_2() called\")\n\n    # set user and message variables for phantom.prompt call\n\n    user = json.loads(phantom.get_run_data(key=\"get_playbook_owner:username\"))\n    message = \"\"\"Hello {0}.\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_playbook_owner:custom_function:username\"\n    ]\n\n    # responses\n    response_types = [\n        {\n            \"prompt\": \"Something\",\n            \"options\": {\n                \"type\": \"message\",\n            },\n        }\n    ]\n\n    phantom.prompt2(container=container, user=user, message=message, respond_in_mins=30, name=\"prompt_2\", parameters=parameters, response_types=response_types, callback=format_note)\n\n    return",
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "approver": "",
                        "functionId": 2,
                        "functionName": "prompt_2",
                        "id": "4",
                        "message": "Hello {0}.",
                        "parameters": [
                            "get_playbook_owner:custom_function:username"
                        ],
                        "responseTime": 30,
                        "responses": [
                            {
                                "responsePrompt": "Something",
                                "responseType": "message"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {
                        "approver": "Approver not selected"
                    },
                    "id": "4",
                    "type": "prompt",
                    "x": 80,
                    "y": 296
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "Format note",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "format_note",
                        "id": "5",
                        "parameters": [
                            "get_playbook_owner:custom_function:username",
                            "prompt_2:action_result.summary.responses.0"
                        ],
                        "template": "User {0} said {1}\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "format",
                    "x": 0,
                    "y": 476
                },
                "6": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "add_note_1",
                        "id": "6",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "add_note": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "title",
                                        "name": "title",
                                        "placeholder": "Enter a note title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "content",
                                        "name": "content",
                                        "placeholder": "Enter the note content",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "markdown",
                                            "html"
                                        ],
                                        "default": "markdown",
                                        "description": "",
                                        "label": "note format",
                                        "name": "note_format",
                                        "placeholder": "Enter the note content",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "default": "general",
                                        "hidden": true,
                                        "name": "note_type",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "event_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "task_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add note",
                                "name": "add_note"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "add_note": {
                                "_internal": [
                                    "container",
                                    "note_type",
                                    "author",
                                    "event_id",
                                    "task_id",
                                    "trace"
                                ],
                                "content": "format_note:formatted_data",
                                "note_format": "markdown",
                                "note_type": "general",
                                "title": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "6",
                    "type": "utility",
                    "x": 0,
                    "y": 624
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.8",
        "version": "5.3.5.97812"
    },
    "create_time": "2023-09-11T08:15:54.079457+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}